use std::{path::PathBuf, process::Command};

use caps::{read, CapSet};
use rsjudge_runner::{user::builder, RunAs};

fn main() -> anyhow::Result<()> {
    dbg!(read(None, CapSet::Ambient).unwrap());
    dbg!(read(None, CapSet::Effective).unwrap());
    dbg!(read(None, CapSet::Inheritable).unwrap());
    dbg!(read(None, CapSet::Permitted).unwrap());
    let examples = PathBuf::from(env!("CARGO_MANIFEST_DIR"))
        .parent()
        .and_then(|p| p.parent())
        .ok_or_else(|| anyhow::anyhow!("cannot find crate root"))?
        .join("target/debug/examples");

    let exploit_inner = examples.join("exploit_inner");

    let status = Command::new(dbg!(exploit_inner))
        .run_as(builder()?)
        .output()?;
    assert!(status.status.success());
    println!("{}", String::from_utf8_lossy(&status.stdout));
    println!("{}", String::from_utf8_lossy(&status.stderr));

    let normal = examples.join("normal");
    let status = Command::new(normal).run_as(builder()?).output()?;
    assert!(status.status.success());
    println!("{}", String::from_utf8_lossy(&status.stdout));
    println!("{}", String::from_utf8_lossy(&status.stderr));

    Ok(())
}
