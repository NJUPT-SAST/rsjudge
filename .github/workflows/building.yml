name: building

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  merge_group:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  check-code-style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: nightly
          components: rustfmt
          cache: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check code format with dprint
        uses: dprint/check@v2.2
  lint-debug:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Optimize APT
        run: |
          sudo apt-mark hold firefox
          echo 'set man-db/auto-update false' | sudo debconf-communicate > /dev/null
          sudo dpkg-reconfigure man-db
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y wget clang
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          bins: cargo-hack, cargo-deny, clippy-sarif, sarif-fmt, cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup mold
        uses: rui314/setup-mold@v1
      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup protoc
        uses: Noelware/setup-protoc@1.2.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
      - name: Lint protobuf files
        uses: bufbuild/buf-lint-action@v1
      - name: Run clippy lint
        run: |
          cargo hack clippy --all-targets --each-feature --workspace --message-format json --locked |
            clippy-sarif |
            tee rust-clippy-results.sarif |
            sarif-fmt
        continue-on-error: true
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
      - name: Check dependency graph
        run: cargo deny --all-features --workspace check
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Optimize APT
        run: |
          sudo apt-mark hold firefox
          echo 'set man-db/auto-update false' | sudo debconf-communicate > /dev/null
          sudo dpkg-reconfigure man-db
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y wget clang
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          bins: cargo-hack, cargo-deny, clippy-sarif, sarif-fmt, cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup mold
        uses: rui314/setup-mold@v1
      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup protoc
        uses: Noelware/setup-protoc@1.2.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
      - name: Run tests
        run: cargo hack nextest --each-feature --verbose run --workspace --locked --no-tests=pass
      - name: Check dependency graph
        run: cargo deny --all-features --workspace check
  lint-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Optimize APT
        run: |
          sudo apt-mark hold firefox
          echo 'set man-db/auto-update false' | sudo debconf-communicate > /dev/null
          sudo dpkg-reconfigure man-db
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y wget clang
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          bins: cargo-hack, cargo-deny, clippy-sarif, sarif-fmt, cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup mold
        uses: rui314/setup-mold@v1
      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup protoc
        uses: Noelware/setup-protoc@1.2.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
      - name: Run clippy lint
        run: |
          cargo hack clippy --each-feature --workspace --message-format json --locked --release |
            clippy-sarif |
            tee rust-clippy-results.sarif |
            sarif-fmt
        continue-on-error: true
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
      - name: Check dependency graph
        run: cargo deny --all-features --workspace check
  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Optimize APT
        run: |
          sudo apt-mark hold firefox
          echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
          sudo dpkg-reconfigure man-db
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y wget clang
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: "1.84"
          bins: cargo-hack, cargo-nextest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup mold
        uses: rui314/setup-mold@v1
      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup protoc
        uses: Noelware/setup-protoc@1.2.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Check for MSRV compliance
        env:
          SCCACHE_GHA_ENABLED: true
          RUSTC_WRAPPER: sccache
        run: >
          cargo hack nextest --rust-version --each-feature --verbose
          run --workspace --locked --no-tests=pass
  pkg-deb:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Optimize APT
        run: |
          sudo apt-mark hold firefox
          echo 'set man-db/auto-update false' | sudo debconf-communicate >/dev/null
          sudo dpkg-reconfigure man-db
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y wget lintian clang
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          bins: cargo-deb
          cache: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup mold
        uses: rui314/setup-mold@v1
      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup protoc
        uses: Noelware/setup-protoc@1.2.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
      - name: Build Debian package
        run: cargo xtask dist deb && dpkg-deb -c target/debian/*.deb
      - name: Lint Debian package
        run: lintian -i target/debian/*.deb
      - uses: actions/upload-artifact@v4
        with:
          name: rsjudge-deb
          path: target/debian/*.deb
  pkg-rpm:
    runs-on: ubuntu-latest
    container: fedora:38
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo dnf install -y clang mold protobuf-compiler
      - name: Setup Rust toolchain
        uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          bins: cargo-generate-rpm
          cache: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Enable sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> "$GITHUB_ENV"
          echo "RUSTC_WRAPPER=sccache" >> "$GITHUB_ENV"
      - name: Build RPM package
        run: cargo xtask dist rpm && rpm -qlp target/generate-rpm/*.rpm
      - uses: actions/upload-artifact@v4
        with:
          name: rsjudge-rpm
          path: target/generate-rpm/*.rpm
